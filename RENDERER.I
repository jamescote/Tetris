# 1 "renderer.c" 1
# 1 "./renderer.h" 1
# 1 "./model.h" 1
# 1 "./types.h" 1
# 9 "./types.h"
typedef unsigned char UINT8;
typedef unsigned int  UINT16;
typedef unsigned long UINT32;


typedef UINT8 bool;
# 4 "./model.h" 2
# 1 "./gm_cnsts.h" 1
# 5 "./model.h" 2



typedef struct
{
	UINT8 bPos[ 2 ];
	UINT16 iMap[ 4  ];
} Tetrimino;
# 21 "./model.h"
typedef struct
{
	UINT16 BoardMap[ 20  ];
	UINT16 iScore, iLns_Clrd, iLvl;
	UINT8 tetrisCombo, chainCount, nxtPiece, state;
	UINT8 iGrvty, iTimeElapsed;
} Game_Board;


typedef struct
{
	Tetrimino cCurrPiece;
	Game_Board cMainBoard;
} Game_Model;


void reset_Game( Game_Model* m_MainModel, UINT8 cFirstPiece, UINT8 cNxtPiece );
void move_Left( Tetrimino* m_PieceToMove,
				const Game_Board* m_BoardRef );
void move_Right( Tetrimino* m_PieceToMove,
				 const Game_Board* m_BoardRef );
void move_Down( Tetrimino* m_PieceToMove,
				Game_Board* m_Board );
void Rotate( Tetrimino* m_PieceToRotate,
			 Game_Board* m_Board, UINT8 cDirection );
void Game_Over(Game_Board* m_Board,
				Tetrimino* m_cLockingPiece );
UINT8 clear_Lines(Game_Board* m_Board );
void spawnPiece( Tetrimino* m_cCurrPiece, UINT8 iPiece );
void copyTetrimino( Tetrimino* m_Target, const Tetrimino* m_Source );
bool gravityTriggered( Game_Board* m_Board );
# 4 "./renderer.h" 2
# 1 "./types.h" 1
# 5 "./renderer.h" 2





void render_Tetrimino( UINT16* fbBase16,
					   const Tetrimino* m_TetriModel );
void render_Board( UINT16* fbBase16,
				   const Game_Board* m_Board );
void render_All( UINT16* fbBase16,
				 const Game_Model* m_GameModel,
				 int iFPS );
void render_String( UINT8* fbBase8,
					const char* sText,
					UINT16 iXPxlPos, UINT16 iYPxlPos );
void flag_FPS_Rend( );
void flag_FPS_Clear( );
void render_Static( UINT16* fbBase16 );
void clear_Screen( UINT16* fbBase16 );
# 9 "renderer.c" 2
# 1 "./raster.h" 1
# 1 "./types.h" 1
# 4 "./raster.h" 2


void clear_region( UINT16* fbBase,
		   int x1, int x2,
		   int y1, int y2 );
void plot_h_line( UINT32* fbBase,
		  int x1, int x2, int y );
void plot_v_line( UINT8* fbBase,
		  int x, int y1, int y2 );
void draw_bitmap_8( UINT8* fbBase,
		   int x, int y,
		   const UINT8* pBitMap,
		   unsigned int iHeight );
void draw_bitmap_16( UINT16* fbBase16,
		   int x, int y,
		   const UINT16* pBitMap,
		   unsigned int iHeight );
# 10 "renderer.c" 2
# 1 "./font.c" 1



const static unsigned char charMap[128][16] =
{{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF36, 0xFFFFFF77, 0xFFFFFF7F, 0xFFFFFF7F, 0xFFFFFF7F, 0xFFFFFF7F, 0xFFFFFF3E, 0xFFFFFF3E, 0xFFFFFF1C, 0xFFFFFF1C, 0xFFFFFF08, 0xFFFFFF08, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF1F, 0xFFFFFF1F, 0xFFFFFF1F, 0xFFFFFF1F, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18},
{0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF03},
{0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xF8, 0xF8, 0xF8, 0xF8, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xF8, 0xF8, 0xF8, 0xF8, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xF8, 0xF8, 0xF8, 0xF8, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18},
{0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF07, 0xFFFFFF07, 0xFFFFFF0E, 0xFFFFFF0E, 0xFFFFFF1C, 0xFFFFFF1C, 0xFFFFFF38, 0xFFFFFF38, 0xFFFFFF70, 0xFFFFFF70, 0xE0, 0xE0, 0xC0, 0xC0},
{0xC0, 0xC0, 0xE0, 0xE0, 0xFFFFFF70, 0xFFFFFF70, 0xFFFFFF38, 0xFFFFFF38, 0xFFFFFF1C, 0xFFFFFF1C, 0xFFFFFF0E, 0xFFFFFF0E, 0xFFFFFF07, 0xFFFFFF07, 0xFFFFFF03, 0xFFFFFF03},
{0xFFFFFF01, 0xFFFFFF01, 0xFFFFFF03, 0xFFFFFF03, 0xFFFFFF07, 0xFFFFFF07, 0xFFFFFF0F, 0xFFFFFF0F, 0xFFFFFF1F, 0xFFFFFF1F, 0xFFFFFF3F, 0xFFFFFF3F, 0xFFFFFF7F, 0xFFFFFF7F, 0xFF, 0xFF},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF0F, 0xFFFFFF0F, 0xFFFFFF0F, 0xFFFFFF0F, 0xFFFFFF0F, 0xFFFFFF0F, 0xFFFFFF0F, 0xFFFFFF0F},
{0x80, 0x80, 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF},
{0xFFFFFF0F, 0xFFFFFF0F, 0xFFFFFF0F, 0xFFFFFF0F, 0xFFFFFF0F, 0xFFFFFF0F, 0xFFFFFF0F, 0xFFFFFF0F, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xFF, 0xFF, 0xFF, 0xFF, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFF, 0xFF, 0xFF, 0xFF},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF08, 0xFFFFFF1C, 0xFFFFFF1C, 0xFFFFFF08, 0xFFFFFF22, 0xFFFFFF77, 0xFFFFFF77, 0xFFFFFF22, 0xFFFFFF08, 0xFFFFFF08, 0xFFFFFF1C, 0xFFFFFF1C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF1F, 0xFFFFFF1F, 0xFFFFFF1F, 0xFFFFFF1F, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFF, 0xFF, 0xFF, 0xFF, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
{0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18},
{0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFF, 0xFF, 0xFF, 0xFF, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0},
{0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF1F, 0xFFFFFF1F, 0xFFFFFF1F, 0xFFFFFF1F, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF78, 0xFFFFFF78, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF78, 0xFFFFFF78, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF1E, 0xFFFFFF1E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF30, 0xFFFFFF30, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF30, 0xFFFFFF30, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFF, 0xFF, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFF, 0xFF, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF3E, 0xFFFFFF7E, 0xFFFFFF60, 0xFFFFFF70, 0xFFFFFF38, 0xFFFFFF1C, 0xFFFFFF0E, 0xFFFFFF06, 0xFFFFFF7E, 0xFFFFFF7C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF6C, 0xFFFFFF6C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF30, 0xFFFFFF30, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF46, 0xFFFFFF46, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF1C, 0xFFFFFF3E, 0xFFFFFF36, 0xFFFFFF36, 0xFFFFFF3C, 0xFFFFFF1C, 0xFFFFFF38, 0xFFFFFF38, 0xFFFFFF6F, 0xFFFFFF6F, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7B, 0xFFFFFF3B, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF06, 0xFFFFFF0E, 0xFFFFFF1C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF1C, 0xFFFFFF0E, 0xFFFFFF06, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF60, 0xFFFFFF70, 0xFFFFFF38, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF38, 0xFFFFFF70, 0xFFFFFF60, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF3C, 0xFFFFFF3C, 0xFF, 0xFF, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF30, 0xFFFFFF30},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF30, 0xFFFFFF30, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF40, 0xFFFFFF40, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF6E, 0xFFFFFF6E, 0xFFFFFF76, 0xFFFFFF76, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF38, 0xFFFFFF38, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF30, 0xFFFFFF30, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF1C, 0xFFFFFF1C, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF6C, 0xFFFFFF6C, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF78, 0xFFFFFF7C, 0xFFFFFF0E, 0xFFFFFF06, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3C, 0xFFFFFF7C, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF7C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF30, 0xFFFFFF30, 0xFFFFFF30, 0xFFFFFF30, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3E, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF0C, 0xFFFFFF3C, 0xFFFFFF30, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF30, 0xFFFFFF30},
{0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF30, 0xFFFFFF30, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF30, 0xFFFFFF30, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF30, 0xFFFFFF30, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF6E, 0xFFFFFF6E, 0xFFFFFF6E, 0xFFFFFF6E, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF7E, 0xFFFFFF3E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7C, 0xFFFFFF7C, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF7C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF78, 0xFFFFFF7C, 0xFFFFFF6C, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF6C, 0xFFFFFF7C, 0xFFFFFF78, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF7C, 0xFFFFFF7C, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF7C, 0xFFFFFF7C, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3E, 0xFFFFFF7E, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF6E, 0xFFFFFF6E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF0E, 0xFFFFFF0E, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF6C, 0xFFFFFF6C, 0xFFFFFF78, 0xFFFFFF78, 0xFFFFFF78, 0xFFFFFF78, 0xFFFFFF6C, 0xFFFFFF6C, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF63, 0xFFFFFF63, 0xFFFFFF77, 0xFFFFFF77, 0xFFFFFF7F, 0xFFFFFF7F, 0xFFFFFF6B, 0xFFFFFF6B, 0xFFFFFF63, 0xFFFFFF63, 0xFFFFFF63, 0xFFFFFF63, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF76, 0xFFFFFF76, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF6E, 0xFFFFFF6E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF7C, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF6E, 0xFFFFFF6C, 0xFFFFFF7E, 0xFFFFFF36, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF7C, 0xFFFFFF6C, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3E, 0xFFFFFF7E, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF7C, 0xFFFFFF3E, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF7E, 0xFFFFFF7C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF63, 0xFFFFFF63, 0xFFFFFF63, 0xFFFFFF63, 0xFFFFFF6B, 0xFFFFFF6B, 0xFFFFFF7F, 0xFFFFFF7F, 0xFFFFFF77, 0xFFFFFF77, 0xFFFFFF63, 0xFFFFFF63, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF30, 0xFFFFFF30, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF1E, 0xFFFFFF1E, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF1E, 0xFFFFFF1E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF40, 0xFFFFFF40, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF30, 0xFFFFFF30, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF78, 0xFFFFFF78, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF78, 0xFFFFFF78, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF08, 0xFFFFFF08, 0xFFFFFF1C, 0xFFFFFF1C, 0xFFFFFF36, 0xFFFFFF36, 0xFFFFFF63, 0xFFFFFF63, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFF, 0xFF, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3C, 0xFFFFFF3E, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF3E, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF7C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF7C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3C, 0xFFFFFF7C, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF7C, 0xFFFFFF3C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF3E, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF7E, 0xFFFFFF3E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF0E, 0xFFFFFF1E, 0xFFFFFF18, 0xFFFFFF3E, 0xFFFFFF3E, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3E, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3E, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF7E, 0xFFFFFF7C},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF7C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF38, 0xFFFFFF38, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF00, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF3E, 0xFFFFFF3C},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF6C, 0xFFFFFF6C, 0xFFFFFF78, 0xFFFFFF78, 0xFFFFFF78, 0xFFFFFF6C, 0xFFFFFF6C, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF38, 0xFFFFFF38, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7F, 0xFFFFFF7F, 0xFFFFFF7F, 0xFFFFFF7F, 0xFFFFFF6B, 0xFFFFFF6B, 0xFFFFFF63, 0xFFFFFF63, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF7C, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3E, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3E, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF06},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7C, 0xFFFFFF7E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF3E, 0xFFFFFF7E, 0xFFFFFF60, 0xFFFFFF60, 0xFFFFFF7C, 0xFFFFFF3E, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF7E, 0xFFFFFF7C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF1E, 0xFFFFFF0E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF63, 0xFFFFFF63, 0xFFFFFF6B, 0xFFFFFF6B, 0xFFFFFF7F, 0xFFFFFF7F, 0xFFFFFF3E, 0xFFFFFF3E, 0xFFFFFF36, 0xFFFFFF36, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF7E, 0xFFFFFF3E, 0xFFFFFF0E, 0xFFFFFF0C, 0xFFFFFF7C, 0xFFFFFF78},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF0C, 0xFFFFFF0C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF30, 0xFFFFFF30, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF3C, 0xFFFFFF3C, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF18},
{0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF7E, 0xFFFFFF7E, 0xFFFFFF78, 0xFFFFFF78, 0xFFFFFF7C, 0xFFFFFF7C, 0xFFFFFF6E, 0xFFFFFF6E, 0xFFFFFF66, 0xFFFFFF66, 0xFFFFFF06, 0xFFFFFF06, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF08, 0xFFFFFF08, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF38, 0xFFFFFF38, 0xFFFFFF78, 0xFFFFFF78, 0xFFFFFF38, 0xFFFFFF38, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF08, 0xFFFFFF08, 0xFFFFFF00, 0xFFFFFF00},
{0xFFFFFF10, 0xFFFFFF10, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF1C, 0xFFFFFF1C, 0xFFFFFF1E, 0xFFFFFF1E, 0xFFFFFF1C, 0xFFFFFF1C, 0xFFFFFF18, 0xFFFFFF18, 0xFFFFFF10, 0xFFFFFF10, 0xFFFFFF00, 0xFFFFFF00}
};
# 11 "renderer.c" 2
# 1 "./tetri.c" 1
# 1 "./gm_cnsts.h" 1
# 13 "./tetri.c" 2



const static UINT16 iStartingMaps[ ][ 4  ] =
{

	{0x0000, 0x0018, 0x0018, 0x0000},


	{0x0000, 0x0000, 0x0018, 0x0030},


	{0x0000, 0x0000, 0x0030, 0x0018},


	{0x0020, 0x0020, 0x0020, 0x0020},


	{0x0000, 0x0010, 0x0010, 0x0030},


	{0x0000, 0x0020, 0x0020, 0x0030},


	{0x0038, 0x0010, 0x0000, 0x0000}
};


const static UINT8 iNextMaps[ ][ 4  ] =
{

	{0x00, 0x06, 0x06, 0x00},


	{0x00, 0x06, 0x0c, 0x00},


	{0x00, 0x06, 0x03, 0x00},


	{0x00, 0x0f, 0x00, 0x00},


	{0x00, 0x02, 0x02, 0x06},


	{0x00, 0x04, 0x04, 0x06},


	{0x00, 0x0e, 0x04, 0x00}
};


const static UINT16 iMinoBitmap[ 16  ] =
{
	0x0000,
	0x7ffe,
	0x7ffe,
	0x7ffe,
	0x7ffe,
	0x7ffe,
	0x7ffe,
	0x7e7e,
	0x7e7e,
	0x7ffe,
	0x7ffe,
	0x7ffe,
	0x7ffe,
	0x7ffe,
	0x7ffe,
	0x0000
};
# 12 "renderer.c" 2
# 1 "./gm_cnsts.h" 1
# 13 "renderer.c" 2



void render_Line( UINT16* fbBase16,
				  UINT16 iMap,
				  int iYPxlPos,
				  UINT8 bClearFlag,
				  bool bAND );
bool redrawTetrimino( const Tetrimino* m_CurrTetrimino );
void clear_Tetrimino( UINT16* fbBase16 );
void WToStr( char* cReturnString, UINT16 iValue );
void render_Status( UINT8* fbBase8, const Game_Board* m_Board );
void render_Value( UINT8* fbBase8, UINT16 iValue, UINT16 iXPxlPos, UINT16 iYPxlPos );
void fill_Board( UINT16* fbBase16, const Game_Board* m_Board );
void render_Next_Tetrimino( UINT16* fbBase16, const Game_Board* m_Board );
void render_FPS( UINT8* fbBase8, int iValue );


struct sRendState
{
	Tetrimino m_TetriState;
	UINT16 BoardRendMap[ 20  ];
	UINT16 iRendScore, iRendLns_Clrd, iRendLvl;
	UINT8 iRendNxtPiece;
	bool bRenderFPS;
	bool bClearFPS;
} sMainState[ 2 ] =
{
	{
		{{0}, {0}},
		{0},
		(unsigned int)-1 ,
		(unsigned int)-1 ,
		(unsigned int)-1 ,
		(unsigned char)-1 
	},
	{
		{{0}, {0}},
		{0},
		(unsigned int)-1 ,
		(unsigned int)-1 ,
		(unsigned int)-1 ,
		(unsigned char)-1 
	}
};
UINT8 iCurrState = 0 ;





void reset_Rend_State( )
{
	UINT8 i, j;

	for( j = 0; j <= 1 ; j++ )
	{

		sMainState[ j ].m_TetriState.bPos[ 0  ] = 0;
		sMainState[ j ].m_TetriState.bPos[ 1  ] = 0;
		for( i = 0; i < 4 ; i++ )
			sMainState[ j ].m_TetriState.iMap[ i ] = 0;


		for( i = 0; i < 20 ; i++ )
			sMainState[ j ].BoardRendMap[ i ] = 0;
		sMainState[ j ].iRendScore 		= (unsigned int)-1 ;
		sMainState[ j ].iRendLns_Clrd 		= (unsigned int)-1 ;
		sMainState[ j ].iRendLvl			= (unsigned int)-1 ;
		sMainState[ j ].iRendNxtPiece		= (unsigned char)-1 ;
	}
}




void flag_FPS_Rend( )
{
	UINT8 i;

	for( i = 0; i <= 1 ; i++ )
		sMainState[ i ].bRenderFPS = 1 ;
}




void flag_FPS_Clear( )
{
	UINT8 i;

	for( i = 0; i <= 1 ; i++ )
		sMainState[ i ].bClearFPS = 1 ;
}





void render_FPS( UINT8* fbBase8, int iValue )
{
	if( sMainState[ iCurrState ].bRenderFPS )
	{
		render_Value( fbBase8, iValue, 0, 0 );
		sMainState[ iCurrState ].bRenderFPS = 0 ;
	}
	else if( sMainState[ iCurrState ].bClearFPS )
	{
		clear_region( (UINT16*)fbBase8, 0, 8  << 1, 0, 16  );
		sMainState[ iCurrState ].bClearFPS = 0 ;
	}
}




void render_Tetrimino( UINT16* fbBase16,
					   const Tetrimino* m_TetriModel )
{
	int iYPos = m_TetriModel->bPos[ 1  ];
	UINT8 i = ( iYPos < 0 ? 0 - iYPos : 0 );

	if( redrawTetrimino( m_TetriModel ) )
	{
		clear_Tetrimino( fbBase16 );

		for( i; i < 4 ; i++ )
			render_Line( fbBase16,
						 m_TetriModel->iMap[ i ],
						 (((20  - 1) - iYPos) + i) << 4 ,
						 1 ,
						 0  );

		copyTetrimino( &(sMainState[ iCurrState ].m_TetriState), m_TetriModel );
	}
}





bool redrawTetrimino( const Tetrimino* m_CurrTetrimino )
{
	bool bDifference;
	UINT8 i;

	bDifference = (sMainState[ iCurrState ].m_TetriState.bPos[ 0  ] != m_CurrTetrimino->bPos[ 0  ]);
	bDifference = bDifference || (sMainState[ iCurrState ].m_TetriState.bPos[ 1  ] != m_CurrTetrimino->bPos[ 1  ]);

	for( i = 0; i < 4 ; i++ )
		bDifference = bDifference || (sMainState[ iCurrState ].m_TetriState.iMap[ i ] != m_CurrTetrimino->iMap[ i ]);

	return bDifference;
}




void clear_Tetrimino( UINT16* fbBase16 )
{
	UINT16 iYPxlPos = 320  - ((sMainState[ iCurrState ].m_TetriState.bPos[ 1  ] + 1) << 4 );
	UINT8 i;

	for( i = 0; i < 4 ; i++ )
	{
		if( sMainState[ iCurrState ].m_TetriState.iMap[ i ] != 0 )
		{
			render_Line( fbBase16,
						 sMainState[ iCurrState ].m_TetriState.iMap[ i ],
					     iYPxlPos, 0 , 0  );
		}
		iYPxlPos += 16 ;
	}
}
# 197 "renderer.c"
void render_Line( UINT16* fbBase16,
					 UINT16 iMap,
					 int iYPxlPos,
					 UINT8 bDrawFlag,
					 bool bAND )

{
	UINT16 i, iXPxlPos = (400  - 16 );
	UINT16 iYPxlEndPos;
	UINT8 bActiveBit;

	if( iYPxlPos >= 0 && iYPxlPos < 400  )
	{
		iYPxlEndPos = iYPxlPos + 16 ;
		for( i = 0; i < 10 ; i++ )
		{
			bActiveBit = (iMap & (2  - 1));

			if( bDrawFlag && bActiveBit )
				draw_bitmap_16( fbBase16,
								iXPxlPos,
								iYPxlPos,
								iMinoBitmap,
								16  );
			else if( bAND || bActiveBit)
				clear_region( fbBase16,
							  iXPxlPos,
							  iXPxlPos + 16 ,
							  iYPxlPos,
							  iYPxlEndPos );
			iMap >>= 1;
			iXPxlPos -= 16 ;
		}
	}
}





void render_Board( UINT16* fbBase16,
				   const Game_Board* m_Board )
{
	fill_Board( fbBase16, m_Board );

	render_Next_Tetrimino( fbBase16, m_Board );

	render_Status( (UINT8*)fbBase16, m_Board );
}




void fill_Board( UINT16* fbBase16, const Game_Board* m_Board )
{
	UINT16 iYPxlPos = 320  - 16 ;
	UINT8 i = 0;

	while( i < 20  &&
		   ( m_Board->BoardMap[ i ] != 0 || sMainState[ iCurrState ].BoardRendMap[ i ] != 0 ) )
	{
		if( m_Board->BoardMap[ i ] != sMainState[ iCurrState ].BoardRendMap[ i ] )
		{
			render_Line( fbBase16,
						 m_Board->BoardMap[ i ],
						 iYPxlPos,
						 1 ,
						 1  );
			sMainState[ iCurrState ].BoardRendMap[ i ] = m_Board->BoardMap[ i ];
		}
		i++;
		iYPxlPos -= 16 ;
	}
}




void render_Next_Tetrimino( UINT16* fbBase16, const Game_Board* m_Board )
{
	UINT8 iTetMap;
	UINT16 iXPxlPos = ((400  + 16 )  + (16  << 2 ))  - 16 ;
	UINT16 iCurrXPxlPos = iXPxlPos;
	UINT16 iYPxlPos = 32 ;
	UINT8 i, j;

	if( m_Board->nxtPiece != sMainState[ iCurrState ].iRendNxtPiece )
	{
		clear_region( fbBase16,
					  (400  + 16 ) ,
					  ((400  + 16 )  + (16  << 2 )) ,
					  32 ,
					  (32  + (16  << 2 ))  );

		for( i = 0; i < 4 ; i++ )
		{
			iTetMap = iNextMaps[ m_Board->nxtPiece ][ i ];
			for( j = 0; j < 4 ; j++ )
			{
				if( (iTetMap & 1) != 0 )
					draw_bitmap_16( fbBase16,
									iCurrXPxlPos, iYPxlPos,
									iMinoBitmap,
									16  );
				iTetMap >>= 1;
				iCurrXPxlPos -= 16 ;
			}
			iCurrXPxlPos = iXPxlPos;
			iYPxlPos += 16 ;
		}

		sMainState[ iCurrState ].iRendNxtPiece = m_Board->nxtPiece;
	}
}
# 318 "renderer.c"
void render_Status( UINT8* fbBase8, const Game_Board* m_Board )
{

	if( m_Board->iScore != sMainState[ iCurrState ].iRendScore )
	{
		render_Value( fbBase8, m_Board->iScore, ((400  + 8 )  + 120) , ((32  + (16  << 2 ))  + 16 ) + 1  );
		sMainState[ iCurrState ].iRendScore = m_Board->iScore;
	}


	if( m_Board->iLvl != sMainState[ iCurrState ].iRendLvl )
	{
		render_Value( fbBase8, m_Board->iLvl + 1, ((400  + 8 )  + 120) , (((32  + (16  << 2 ))  + 16 ) + 1  + (16  + 5 ))  );
		sMainState[ iCurrState ].iRendLvl = m_Board->iLvl;
	}


	if( m_Board->iLns_Clrd != sMainState[ iCurrState ].iRendLns_Clrd )
	{
		render_Value( fbBase8, m_Board->iLns_Clrd, ((400  + 8 )  + 120) , ((((32  + (16  << 2 ))  + 16 ) + 1  + (16  + 5 ))  + (16  + 5 ))  );
		sMainState[ iCurrState ].iRendLns_Clrd = m_Board->iLns_Clrd;
	}
}





void render_Value( UINT8* fbBase8, UINT16 iValue, UINT16 iXPxlPos, UINT16 iYPxlPos )
{
	char cValueBuffer[ 255  ] = {0x0};

	WToStr( cValueBuffer, iValue );

	render_String( fbBase8, cValueBuffer,
				   iXPxlPos, iYPxlPos );
}





void render_Static( UINT16* fbBase16 )
{
	clear_Screen( fbBase16 );


	plot_v_line( (UINT8*)fbBase16, (240  - 1) , 0, (320  + 1)  );
	plot_v_line( (UINT8*)fbBase16, (400  + 1) , 0, (320  + 1)  );
	plot_h_line( (UINT32*)fbBase16,
				 (240  - 1) ,
				 (400  + 1) ,
				 (320  + 1)  );


	render_String( (UINT8*)fbBase16,
				   "NEXT:",
				   ((400  + 16 )  + 16 ) ,
				   (32  - 16 )  );
	render_String( (UINT8*)fbBase16,
				   "SCORE: ",
				   (400  + 8 ) ,
				   ((32  + (16  << 2 ))  + 16 ) + 1  );
	render_String( (UINT8*)fbBase16,
				   "LEVEL: ",
				   (400  + 8 ) ,
				   (((32  + (16  << 2 ))  + 16 ) + 1  + (16  + 5 ))  );
	render_String( (UINT8*)fbBase16,
				   "LINES CLEARED: ",
				   (400  + 8 ) ,
				   ((((32  + (16  << 2 ))  + 16 ) + 1  + (16  + 5 ))  + (16  + 5 ))  );


	plot_h_line( (UINT32*)fbBase16,
				 (400  + 1) ,
				 ((400  + 16 )  + (16  << 2 ))  + 16 ,
				 32  - 16  );
	plot_h_line( (UINT32*)fbBase16,
				 (400  + 16 ) ,
				 ((400  + 16 )  + (16  << 2 )) ,
				 32  - 1 );
	plot_v_line( (UINT8*)fbBase16,
				 (400  + 16 )  - 1,
				 32 ,
				 (32  + (16  << 2 ))  );
	plot_v_line( (UINT8*)fbBase16,
				 ((400  + 16 )  + (16  << 2 ))  + 1,
				 32 ,
				 (32  + (16  << 2 ))  );
	plot_v_line( (UINT8*)fbBase16,
				 ((400  + 16 )  + (16  << 2 ))  + 16 ,
				 32  - 16 ,
				 (32  + (16  << 2 ))  + 16  );
	plot_h_line( (UINT32*)fbBase16,
				 (400  + 1) ,
				 ((400  + 16 )  + (16  << 2 ))  + 16 ,
				 (32  + (16  << 2 ))  + 16  );
	plot_h_line( (UINT32*)fbBase16,
				 (400  + 16 ) ,
				 ((400  + 16 )  + (16  << 2 )) ,
				 (32  + (16  << 2 ))  + 1 );
}




void render_All( UINT16* fbBase16,
				 const Game_Model* m_GameModel,
				 int iFPS )
{
	iCurrState = 1 - iCurrState;
	render_Tetrimino( fbBase16, &(m_GameModel->cCurrPiece) );
	render_Board( fbBase16, &(m_GameModel->cMainBoard) );
	render_FPS( (UINT8*)fbBase16, iFPS );
}





void render_String( UINT8* fbBase8, const char* sText, UINT16 iXPxlPos, UINT16 iYPxlPos )
{
	UINT16 iCurrX = iXPxlPos, iCurrY = iYPxlPos;
	UINT8 iStrIndex = 0;
	bool bNewLine = 0 ;

	while( iStrIndex < 255  && sText[ iStrIndex ] != 0 )
	{
		if( sText[ iStrIndex ] == '\n' )
			bNewLine = 1 ;
		else if( sText[ iStrIndex ] == '\t' )
		{
			while( (iCurrX += 8 ) & 31  )
				;
			if( iCurrX >= 640  )
				bNewLine = 1 ;
		}
		else if( sText[ iStrIndex ] < 128  )
			draw_bitmap_8( fbBase8, iCurrX, iCurrY, charMap[ sText[ iStrIndex ] ], 16  );
		else
			draw_bitmap_8( fbBase8, iCurrX, iCurrY, charMap[ 0 ], 16  );

		if( bNewLine )
		{
			iCurrX = iXPxlPos;
			iCurrY += 16 ;
			bNewLine = 0 ;
		}
		else
			iCurrX += 8 ;

		iStrIndex++;
	}
}




void clear_Screen( UINT16* fbBase16 )
{
	clear_region( fbBase16, 0, 640 , 0, 400  );
	reset_Rend_State( );
}
